#pragma once
#ifndef MYIMGPROC_H
#define MYIMGPROC_H

#include <cstdio>
#include <iostream>
#include <sstream>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2/opencv.hpp>

#include "Maze.h"

using namespace cv;
using namespace std;

class Myimgproc
{
private:
	static Mat fgMaskMOG2;	//fg mask fg mask generated by MOG2 method
	static Mat img_tracking;
	static Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor

	//erosion / dilation window size
	static const int erosion_size = 3;
	static const int dilation_size = 8;

	//used by findContours method
	static vector<vector<Point>> contours;
	static vector<Vec4i> hierarchy;

	//used to extract maze lines
	static Mat src_HSV;

public:
	static Mat dst;
	/**
	 *	@brief  :	enable background subtraction
	 *	@return :	void
	 */
	static void init();

	/**
	 *	@brief	:	Create all opencv windows to show results
	 */
	static void createAllWindows(void);

	/**
	 *	@brief	:	Get tank position, mark it with contour
	 *				uses background substraction algorithm
	 *
	 *	@param frame	:		latest frame from camera
	 *	@return :	tuple with tanks position and angle
	 */
	static tuple<Point2i,int> processImages(Mat & frame);

	/**
	 *	@brief	:	Extract maze lines from first image and draw them
	 *
	 *	@return :	void
	 */
	static void draw_maze(Mat & frame);

	/**
	 *	@brief	:	Scan first frame and create graph nodes
	 *				makes graph with rectangle tiles (sliding window)
	 *
	 *	@return :	Pointer to created graph (maze)
	 */
	static Maze * create_graph2();
	
	/**
	 *	@brief	:	For each window check if it intersects with maze line
	 *	
	 *	@return :	True if not intersect
	 */
	static bool check_empty(Rect & windows, Mat & frame);

	/**
	 *	@brief	:	Calculate sliding windows middle point
	 *
	 *	@return :	Point2i with position of middle point
	*/
	static Point2i middle_point(Rect & windows);
};

void histogram_debug(void);

#endif // MYIMGPROC_H
	 //Point & find_middle_lane(pair<Point, Point> & current_line, vector<pair<Point, Point>> & line_cart);
	/**
	 *	@brief	:	Scan first frame and create graph nodes
	 * makes graph with line crossing
		NOT YET IMPLEMENTED
	 */
	//static void create_graph(Mat & frame);