#include "myimgproc.h"

using namespace cv;
using namespace std;

void processImages(const char* firstFrameFilename)
{
	//create GUI windows
	namedWindow("Frame"   , WINDOW_NORMAL);
	namedWindow("BS_MOG_2", WINDOW_NORMAL);
	//namedWindow("Tracking", WINDOW_NORMAL);

	Mat frame; //current frame
	Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
	Mat img_tracking;
	Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor

	//create Background Subtractor objects
	pMOG2 = createBackgroundSubtractorMOG2(500, 150.0, false); //MOG2 approach

	//current image filename
	string fn(firstFrameFilename);
	
	//frame info
	int frameNumber = 0;
	string prefix = "data/img";
	string suffix = ".jpg";

	//read the first file of the sequence
	frame = imread(firstFrameFilename);
	if (!frame.data) 
	{
		//error in opening the first image
		cerr << "Unable to open first image frame: " << firstFrameFilename << endl;
		waitKey(0);
		exit(EXIT_FAILURE);
	}

	int a = 1; //input from keyboard
	for(int i = 1; i < 15; i++)
	{
		//update the background model
		pMOG2->apply(frame, fgMaskMOG2);

		/*noise reduction routine*/
		int erosion_size = 3;
		Mat element_erosion = getStructuringElement(MORPH_RECT,
			Size(2 * erosion_size + 1, 2 * erosion_size + 1),
			Point(erosion_size, erosion_size));

		int dilation_size = 8;
		Mat element_dilation = getStructuringElement(MORPH_RECT,
			Size(2 * dilation_size + 1, 2 * dilation_size + 1),
			Point(dilation_size, dilation_size));

		erode(fgMaskMOG2, fgMaskMOG2, element_erosion);
		dilate(fgMaskMOG2, fgMaskMOG2, element_dilation);
		dilate(fgMaskMOG2, fgMaskMOG2, element_dilation);
		/*-----------------------*/

		/*find tank contour*/
		vector<vector<Point>> contours;
		vector<Vec4i> hierarchy;
		findContours(fgMaskMOG2, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));
		
		for (size_t i = 0; i < contours.size(); i++)
		{
		Scalar color = Scalar(0,0,0);
		drawContours(frame, contours, 0, color, 10, LINE_8, hierarchy, 0);
		}
		

		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("BS_MOG_2", fgMaskMOG2);

		//search for the next image in the sequence
		ostringstream oss;
		oss << (frameNumber + i);
		string nextFrameNumberString = oss.str();
		string nextFrameFilename = prefix + nextFrameNumberString + suffix;
		
		a = waitKey(30);
		//read the next frame
		frame = imread(nextFrameFilename);
		if (frame.empty()) {
			//error in opening the next image in the sequence
			cerr << "Unable to open image frame: " << nextFrameFilename << endl;
			exit(EXIT_FAILURE);
		}
		//update the path of the current frame
		fn.assign(nextFrameFilename);
	}
	waitKey(0);

}

